SQL> CREATE OR REPLACE FUNCTION addnumber(a IN NUMBER, b IN NUMBER)
  2  RETURN NUMBER
  3  AS
  4  s NUMBER;
  5  BEGIN
  6     s := a+b;
  7  RETURN s;
  8  END;
  9  /

Function created.

SQL> DECLARE
  2     num1 number;
  3  BEGIN
  4     num1 := addnumber(2,8);
  5     dbms_output.put_line('Sum is: '||num1);
  6  END;
  7  /
Sum is: 10

PL/SQL procedure successfully completed.



SQL> CREATE OR REPLACE FUNCTION fact(n NUMBER)
  2  RETURN NUMBER
  3  AS
  4  f NUMBER := 1;
  5  BEGIN
  6     FOR i IN 1..n LOOP
  7             f := f*i;
  8     END LOOP;
  9  RETURN f;
 10  END;
 11  /

Function created.

SQL> DECLARE
  2     n number;
  3     f number;
  4
  5  BEGIN
  6     n := &n;
  7     f := fact(n);
  8     dbms_output.put_line('Factorial is: ' ||f);
  9  END;
 10  /
Enter value for n: 5
old   6:        n := &n;
new   6:        n := 5;
Factorial is: 120

PL/SQL procedure successfully completed.



SQL> CREATE TABLE student_details(
  2     roll INT,
  3     marks INT,
  4     phone CHAR(10));

Table created.

SQL> INSERT INTO student_details VALUES(1, 72, '8086688441');

1 row created.

SQL> INSERT INTO student_details VALUES(2, 78, '9778429912');

1 row created.

SQL> INSERT INTO student_details VALUES(3, 65, '8281612913');

1 row created.

SQL> SELECT * FROM student_details;

      ROLL      MARKS PHONE
---------- ---------- ----------
         1         72 8086688441
         2         78 9778429912
         3         65 8281612913


SQL> CREATE OR REPLACE PROCEDURE pr1
  2  AS
  3  BEGIN
  4     UPDATE student_details SET marks = marks * 1.05;
  5  END;
  6  /

Procedure created.


SQL> BEGIN
  2     pr1;
  3  END;
  4  /

PL/SQL procedure successfully completed.


SQL> SELECT * FROM student_details;

      ROLL      MARKS PHONE
---------- ---------- ----------
         1         76 8086688441
         2         82 9778429912
         3         68 8281612913




SQL> CREATE TABLE customer_details(
  2     cust_id CHAR(3) UNIQUE,
  3     cust_name VARCHAR(10),
  4     address VARCHAR(20));

Table created.

SQL> CREATE TABLE emp_details(
  2     empid CHAR(2) UNIQUE,
  3     emp_name VARCHAR(10),
  4     salary INT);

Table created.

SQL> CREATE TABLE cust_count(
  2     count_row INT);

Table created.

SQL> INSERT INTO cust_count VALUES (0);

1 row created.

SQL> CREATE OR REPLACE TRIGGER insert_msg
  2  AFTER INSERT ON customer_details
  3  FOR EACH ROW
  4  BEGIN
  5     dbms_output.put_line('New row inserted in customer_details table!');
  6  END;
  7  /

Trigger created.

SQL> INSERT INTO customer_details VALUES('100','Manu','Mumbai');
New row inserted in customer_details table!

1 row created.






















SQL> CREATE OR REPLACE TRIGGER counter
  2  AFTER INSERT OR DELETE
  3  ON customer_details
  4  DECLARE
  5     count_row INT;
  6  BEGIN
  7     IF INSERTING THEN
  8             UPDATE cust_count SET count_row = count_row+1;
  9     ELSIF DELETING THEN
 10             UPDATE cust_count SET count_row = count_row-1;
 11     END IF;
 12  END;
 13  /

Trigger created.

SQL> INSERT INTO customer_details VALUES('101','Albin','Cochin');

1 row created.

SQL> SELECT * FROM CUST_COUNT;

 COUNT_ROW
----------
         3

SQL> DELETE FROM customer_details WHERE cust_id = '101';

1 row deleted.

SQL> SELECT * FROM CUST_COUNT;

 COUNT_ROW
----------
         2
